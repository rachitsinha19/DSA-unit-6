#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_VERTICES 15

struct Queue {
    int front, rear, size;
    unsigned capacity;
    int* array;
};

struct Queue* createQueue(unsigned capacity) {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    queue->rear = capacity - 1;
    queue->array = (int*)malloc(queue->capacity * sizeof(int));
    return queue;
}

bool isQueueEmpty(struct Queue* queue) {
    return (queue->size == 0);
}

void enqueue(struct Queue* queue, int item) {
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    queue->size = queue->size + 1;
}

int dequeue(struct Queue* queue) {
    if (isQueueEmpty(queue))
        return -1;
    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size = queue->size - 1;
    return item;
}

void bfs(int** graph, int v, int source, int destination, int* distance, int* parent) {
    struct Queue* queue = createQueue(v);
    enqueue(queue, source);

    distance[source] = 0;
    parent[source] = -1;

    while (!isQueueEmpty(queue)) {
        int current = dequeue(queue);

        for (int neighbor = 0; neighbor < v; ++neighbor) {
            if (graph[current][neighbor] && distance[neighbor] == -1) {
                enqueue(queue, neighbor);
                distance[neighbor] = distance[current] + 1;
                parent[neighbor] = current;

                if (neighbor == destination) {
                    free(queue->array);
                    free(queue);
                    return; // Found the destination, no need to continue BFS
                }
            }
        }
    }

    free(queue->array);
    free(queue);
}

void printShortestPath(int* parent, int source, int destination) {
    int* path = (int*)malloc(MAX_VERTICES * sizeof(int));
    int current = destination;
    int pathIndex = 0;

    while (current != -1) {
        path[pathIndex++] = current;
        current = parent[current];
    }

    printf("Shortest path length is: %d\n", pathIndex - 1);
    printf("Path is: ");
    for (int i = pathIndex - 1; i >= 0; --i) {
        printf("%d ", path[i]);
    }
    printf("\n");

    free(path);
}

int main() {
    int v, e;
    scanf("%d %d", &v, &e);

    int** graph = (int**)malloc(v * sizeof(int*));
    for (int i = 0; i < v; ++i) {
        graph[i] = (int*)malloc(v * sizeof(int));
        for (int j = 0; j < v; ++j) {
            graph[i][j] = 0;
        }
    }

    for (int i = 0; i < e; ++i) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        graph[src][dest] = 1;
        graph[dest][src] = 1; // Assuming the graph is undirected
    }

    int source, destination;
    scanf("%d %d", &source, &destination);

    int* distance = (int*)malloc(v * sizeof(int));
    int* parent = (int*)malloc(v * sizeof(int));

    for (int i = 0; i < v; ++i) {
        distance[i] = -1;
        parent[i] = -1;
    }

    bfs(graph, v, source, destination, distance, parent);
    printShortestPath(parent, source, destination);

    // Free allocated memory
    for (int i = 0; i < v; ++i) {
        free(graph[i]);
    }
    free(graph);
    free(distance);
    free(parent);

    return 0;
}
