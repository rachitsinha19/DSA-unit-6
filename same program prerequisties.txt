#include <stdio.h>

#define MAX_COURSES 10

void checkCourseCompletion(int prerequisites[MAX_COURSES][2], int n) {
    // Create a matrix to represent the course dependencies
    int dependencies[MAX_COURSES][MAX_COURSES] = {0};

    // Populate the matrix based on the prerequisites
    for (int i = 0; i < n; ++i) {
        dependencies[prerequisites[i][0]][prerequisites[i][1]] = 1;
    }

    // Apply Warshall's Algorithm
    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                dependencies[i][j] = dependencies[i][j] || (dependencies[i][k] && dependencies[k][j]);
            }
        }
    }

    // Check for circular dependencies
    for (int i = 0; i < n; ++i) {
        if (dependencies[i][i]) {
            printf("It is not possible to complete all courses based on the given prerequisites.\n");
            return;
        }
    }

    // If no circular dependencies, it is possible to complete all courses
    printf("It is possible to complete all courses based on the given prerequisites.\n");
}

int main() {
    int n;
    scanf("%d", &n);

    int prerequisites[MAX_COURSES][2];

    // Input the prerequisites
    for (int i = 0; i < n; ++i) {
        scanf("%d %d", &prerequisites[i][0], &prerequisites[i][1]);
    }

    checkCourseCompletion(prerequisites, n);

    return 0;
}
